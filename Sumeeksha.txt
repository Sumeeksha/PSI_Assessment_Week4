Q.1 Write a Flume Configuration file for Extracting Twitter Data About covid-19
Ans: 
agent1.sources =source1
agent1.sinks = sink1
agent1.channels = channel1

agent1.sources.source1.channels = channel1
agent1.sinks.sink1.channel = channel1

agent1.sources.source1.type = org.apache.flume.source.twitter.TwitterSource
agent1.sources.source1.consumerKey = fgd34n34nm5n2b32lksae32i4
agent1.sources.source1.consumerSecret = qm2m5b45c5i556p4o2o119dfu
agent1.sources.source1.accessToken = 3n6m679k6l5awe2m2246v7b8a
agent1.sources.source1.accessTokenSecret = 1m3b4b6sdfkefka7k8ll212cx
agent1.sources.source1.keywords = @COVID19

agent1.sinks.sink1.type = hdfs
agent1.sinks.sink1.hdfs.path = /flume/twitter
agent1.sinks.sink1.hdfs.filePrefix = events
agent1.sinks.sink1.hdfs.fileSuffix = .log
agent1.sinks.sink1.hdfs.inUsePrefix = _
agent1.sinks.sink1.hdfs.fileType = DataStream

agent1.channels.channel1.type = memory
agent1.channels.channel1.capacity = 1000

Flume Start Statement:
flume-ng agent --conf-file Twitter-to-hdfs.properties --name agent1 -Dflume.root.logger=WARN,console

Q.2 Write a sqoop job for extracting data from mysql and put In Hive Warehouse
sqoop import -connect jdbc:mysql://localhost:3306/sqoopdemo?useSSL=false –username=root --password=password table=pet –target-dir ‘/sum’ -m 1

Q.3 Write a Pyspark code to perform Action like (take,collect,count and first)
sc
airportsPath = "hdfs:///spark/rdd/airports.csv"
airports = sc.textFile(airportsPath)
airports.take(2)
airports.count()
print(airports)
airports.collect()


Q.4 Q.4 Write a Spark sql code to convert json data and select query where screen_user.name-realDonaldTrump
sc
<pyspark.context.SparkContext at 0x7f0581ba25d0>
twitterPath = "hdfs:///spark/sql/cache-0.json"
import json
twitterData = sc.textFile(twitterPath).map(lambda x:json.loads(x))
#loading data from file 
twitterData.take(1)
from pyspark.sql import SQLContext,Row
sqlC = SQLContext(sc)
sqlC
<pyspark.sql.context.SQLContext at 0x7f057c047f50>
twitterTable = sqlC.read.json(twitterPath)
twitterTable.registerTempTable("twitTab")
sqlC.sql("Select text,user.screen_name from twitTab where user.screen_name='realDonaldTrump' limit 10").collect()


Q.5 Write a Spark Streaming Python Program to Count Error in real Time.

from pyspark import SparkContext
from pyspark.streaming import StreamingContext
sc = SparkContext("local[2]","StreamingErrorCount")
ssc = StreamingContext(sc,10)
ssc.checkpoint("hdfs///spark/streaming")
ds1 = ssc.socketTextStream("localhost",9999)
count = ds1.flatMap(lambda x:x.split(" ")).filter(lambda word : "ERROR" in word).map(lambda word:(word,1)).reduceByKey(lambda x,y : x+y)

count.pprint()
ssc.start()
ssc.awaitTermination()

Q.6 Write a Spark RDD code to get average delay in flights.
from pyspark.sql import Row
from datetime import datetime
from collections import namedtuple

flightsPath = "hdfs:///spark1/rdd/flights.csv"
flightsData = sc.textFile(flightsPath)
fields = ('date','airline','flightnum','origin','dest','dep','dep_delay','arv','arv_delay','airtime','distance')
Flight  = namedtuple('Flight',fields, verbose=False)
DATE_FMT = '%Y-%m-%d'
TIME_FMT = '%H%M%S'
def parse(row):
	row[0] = datetime.strptime(row[0], DATE_FMT).date()
	row[5] = datetime.strptime(row[5], TIME_FMT).time()
	row[6] = float(row[6])
	row[7] = datetime.strptime(row[7], TIME_FMT).time()
	row[8] = float(row[8])
	row[9] = float(row[9])
	row[10] = float(row[10])
	return Flight(*row[:11])
fp = flightsData.map(parse)
sumCount = fp.map(lambda x:x.dep_delay).aggregate((0,0),(lambda acc,value: (acc[0]+value, acc[1]+1)),(lambda acc1,acc2:(acc1[0]+acc2[0],acc1[1]+acc2[1])))
print "The average delay is "+str(sumCount[0]/float(sumCount[1]))




